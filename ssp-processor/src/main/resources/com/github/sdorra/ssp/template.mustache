/*
 * The MIT License
 *
 * Copyright 2016 Sebastian Sdorra.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package {{packageName}};

import com.github.sdorra.ssp.Constants;
import com.github.sdorra.ssp.PermissionCheck;
import com.github.sdorra.ssp.PermissionActionCheck;
import com.github.sdorra.ssp.PermissionActionCheckInterceptor;
import com.github.sdorra.ssp.PermissionCheckInterceptorWrapper;
import com.github.sdorra.ssp.PermissionGuard;

/**
 * Permission checks for {{type}} related permissions.
 */
public final class {{className}} {

  // constants

  /** permission type */
  private static final String TYPE = "{{type}}";
  {{#globalPermissions}}

  /** {{name}} permission */
  public static final String ACTION_{{constant}} = "{{name}}";
  {{/globalPermissions}}
  {{#permissions}}

  /** {{name}} permission */
  public static final String ACTION_{{constant}} = "{{name}}";
  {{/permissions}}

  // guards
  {{#guards}}

  private static final PermissionGuard<{{permissionObject}}> {{value.name}}_GUARD = new {{value.clazz}}();
  {{/guards}}

  // constructor

  private {{className}}(){}

  // public global permissions methods
  {{#globalPermissions}}

  /**
   * Returns permission check for {{name}} action.
   *
   * @return permission check for {{name}} action
   */
  public static PermissionCheck {{name}}() {
    return check(ACTION_{{constant}}, createPermissionCheckWrapper("{{name}}", {{constant}}_GUARD));
  }
  {{/globalPermissions}}

  // public permission methods
  {{#permissions}}

  /**
   * Returns permission check for {{name}} action.
   *
   * @param id id of permission object
   *
   * @return permission check for {{name}} action
   */
  public static PermissionCheck {{name}}(String id) {
    return check(ACTION_{{constant}}.concat(Constants.SEPARATOR).concat(id), createPermissionCheckWrapper("{{name}}", id, {{constant}}_GUARD));
  }

  /**
   * Returns permission check for {{name}} action.
   *
   * @param item permission object
   *
   * @return permission check for {{name}} action
   */
  public static PermissionCheck {{name}}({{permissionObject}} item) {
    return check(ACTION_{{constant}}.concat(Constants.SEPARATOR).concat(item.getId()), createPermissionCheckWrapper("{{name}}", item, {{constant}}_GUARD));
  }

  /**
   * Returns permission action check for {{name}} action.
   *
   * @return permission action check for {{name}} action
   */
  public static PermissionActionCheck<{{permissionObject}}> {{name}}() {
    return actionCheck(ACTION_{{constant}}, {{constant}}_GUARD);
  }
  {{/permissions}}

  {{#customGlobal}}
  /**
   * Returns permission check for a custom global action.
   *
   * @return permission check for the given custom global action
   */
   public static PermissionCheck custom(String customAction) {
     return check(customAction, createPermissionCheckWrapper(customAction, __CUSTOM_GUARD));
   }
  {{/customGlobal}}

  {{#custom}}
  /**
   * Returns permission check for custom action.
   *
   * @param customAction name of custom action
   * @param id id of permission object
   *
   * @return permission check for a custom action
   */
   public static PermissionCheck custom(String customAction, String id) {
     return check(customAction.concat(Constants.SEPARATOR).concat(id), createPermissionCheckWrapper(customAction, id, __CUSTOM_GUARD));
   }

  /**
   * Returns permission check for custom action.
   *
   * @param customAction name of custom action
   * @param item permission object
   *
   * @return permission check for custom action
   */
   public static PermissionCheck custom(String customAction, {{permissionObject}} item) {
     return check(customAction.concat(Constants.SEPARATOR).concat(item.getId()), createPermissionCheckWrapper(customAction, item, __CUSTOM_GUARD));
   }

  /**
   * Returns permission action check for custom action.
   *
   * @param customAction name of custom action
   *
   * @return permission action check for custom action
   */
   public static PermissionActionCheck<{{permissionObject}}> customActionCheck(String customAction) {
     return actionCheck(customAction, __CUSTOM_GUARD);
   }
  {{/custom}}

  // private methods

  private static PermissionCheckInterceptorWrapper createPermissionCheckWrapper(String customAction, PermissionGuard<{{permissionObject}}> guard) {
    PermissionActionCheckInterceptor<{{permissionObject}}> interceptor = guard.intercept(customAction);
    PermissionCheckInterceptorWrapper wrapper = PermissionCheckInterceptorWrapper.forRaw(interceptor);
    return wrapper;
  }

  private static PermissionCheckInterceptorWrapper createPermissionCheckWrapper(String customAction, String id, PermissionGuard<{{permissionObject}}> guard) {
    PermissionActionCheckInterceptor<{{permissionObject}}> interceptor = guard.intercept(customAction);
    PermissionCheckInterceptorWrapper wrapper = PermissionCheckInterceptorWrapper.forId(id, interceptor);
    return wrapper;
  }

  private static PermissionCheckInterceptorWrapper createPermissionCheckWrapper(String customAction, {{permissionObject}} item, PermissionGuard<{{permissionObject}}> guard) {
    PermissionActionCheckInterceptor<{{permissionObject}}> interceptor = guard.intercept(customAction);
    PermissionCheckInterceptorWrapper wrapper = PermissionCheckInterceptorWrapper.forItem(item, interceptor);
    return wrapper;
  }

  private static PermissionActionCheck<{{permissionObject}}> actionCheck(String action, PermissionGuard<{{permissionObject}}> guard) {
    PermissionActionCheckInterceptor<{{permissionObject}}> interceptor = guard.intercept(action);
    return new PermissionActionCheck<>(TYPE.concat(Constants.SEPARATOR).concat(action), interceptor);
  }

  private static PermissionCheck check(String permission, PermissionCheckInterceptorWrapper wrapper) {
    return new PermissionCheck(TYPE.concat(Constants.SEPARATOR).concat(permission), wrapper);
  }
}
